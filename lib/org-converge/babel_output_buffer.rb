module Orgmode
  class BabelOutputBuffer < OutputBuffer
    attr_reader :tangle
    attr_reader :scripts

    def initialize(output)
      super(output)

      # ~@tangle~ files are put in the right path
      # : @tangle['/path'] = [Lines]
      @tangle  = Hash.new {|h,k| h[k] = []}

      # ~@scripts~ are tangled in order and ran
      # : @scripts = [text, text, ...]
      @scripts = []

      @buffer = ''
    end

    def push_mode(mode, indent)
      super(mode, indent)
    end

    def pop_mode(mode = nil)
      m = super(mode)
      @list_indent_stack.pop
      m
    end

    def insert(line)
      # We try to get the lang from #+BEGIN_SRC blocks
      if line.begin_block?
        @block_lang = line.block_lang
        if line.block_header_arguments[':tangle']
          @current_tangle = line.block_header_arguments[':tangle']
        else
          @shebang = line.block_header_arguments[':shebang']
          @current_tangle = nil
          @buffer = ''
        end
      end

      case
      when (line.assigned_paragraph_type == :code and @current_tangle)
        # Need to keep track of the current tangle to buffer its lines
        @tangle[@current_tangle] << line
      when (line.assigned_paragraph_type == :code)
        # When a tangle is not going on, it means that the lines would go
        # into a runnable script
        @buffer << line.output_text << "\n"
      when (!@buffer.empty? and not (line.begin_block? or line.assigned_paragraph_type == :code))
        # Fix indentation and remove pre fix commas from Org mode before flushing
        strip_code_block!
        @scripts << @buffer
        @buffer = ''
      end

      @output_type = line.assigned_paragraph_type || line.paragraph_type
    end

    # Flushing is a bit different since we still need the metadata
    # from lines in order to flush to correct tangle buffer
    # TODO: Should be in the parent class as well...
    def flush!; false; end

    # TODO: This should be in the parent class....
    def output_footnotes!; false; end

    def strip_code_block!
      if @code_block_indent and @code_block_indent > 0
        strip_regexp = Regexp.new("^" + " " * @code_block_indent)
        @buffer.gsub!(strip_regexp, "")
      end
      @code_block_indent = nil

      # Strip proctective commas generated by Org mode (C-c ')
      @buffer.gsub! /^(\s*)(,)(\s*)([*]|#\+)/ do |match|
        "#{$1}#{$3}#{$4}"
      end
    end
  end
end
